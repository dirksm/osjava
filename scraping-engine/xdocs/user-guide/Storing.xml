<?xml version="1.0"?>
<document>

  <properties>
    <author email="bayard@generationjava.com">Henri Yandell</author>
    <title></title>
  </properties>

  <body>
  <section>
<p>Once you've broken the backbone of a scrape by writing the Parser, you're going to want to put the results somewhere. </p>

<p>The existing Stores are: </p>

<pre>
ConsoleStore - Print the data to System.out
NullStore - Throw the data away
FileStore - Store the data in a file
JdbcStore - Store data via an INSERT sql statement
CallableJdbcStore - Store data via a stored procedure
</pre>

<p>Let's go over each and discuss the configuration options. </p>

</section><section name="ConsoleStore">

<pre>
Xxx.store=Console
</pre>

<p>Simple to configure, simple to use. Hook it up and your Results be dumped on screen. Useful in debugging. </p>

</section><section name="NullStore">

<pre>
Xxx.store=Null
</pre>

<p>You also get this store when you provide no configuration. This is also of use in debugging; especially if the debugging you want to see is from your Parser or Fetcher, and you don't want the spam of your results trying to go somewhere. </p>

<p>NullStore is also useful if you're really interested in the fact the server had a dynamic page invoked and not in the actual result from the page. </p>

</section><section name="FileStore">

<pre>
Xxx.store=File
Xxx.path=/tmp/foo/
Xxx.saveAs=somefile.foo
</pre>

<p>The first store with additional options; ie) where to save the file. Currently this store only writes the {0,0} field from your result; ie) the first field in the first row. This may seem silly, but FileStore was created to store scraped images rather than data. Improving this is a TODO. </p>

</section><section name="JdbcStore">

<pre>
Xxx.store=Jdbc
Xxx.DS=FooDS
# then either
Xxx.sql=INSERT INTO Foo (col1, col2) VALUES(?,?)
# or
Xxx.table=Foo
</pre>

<p>Storing data in a database is hard to get away from when scraping. <code>JdbcStore</code> makes it easy. </p>

<p>The first configuration option is the DataSource; this should be obtained via JNDI as a <code>javax.sql.DataSource</code> object and for most of us this means knowing how to <a href="configure a DataSource in Simple-JNDI.html">configure a DataSource in Simple-JNDI</a>. </p>

<p>Then you can either specify the INSERT statement to use, in <code>java.sql.PreparedStatement</code> notation, or for the exceptionally lazy you can simply specify the table to INSERT into, which will result in a generic statement of the type <code>INSERT INTO Foo VALUES(?, ?)</code> where the number of question marks inside VALUES is dependent on the length of the row in the results. </p>

<p>Currently JdbcStore does not do anything special with your data, so if you want to insert a Date into the database, you'll need to place the correct <code>java.sql</code> type in your results and not <code>java.util.Date</code>.  </p>

</section><section name="CallableJdbcStore">

<pre>
Xxx.store=Jdbc
Xxx.DS=FooDS
Xxx.sql=call stored_proc_example(?,?)
# it's a bug that it'll try to work with this.
Xxx.table=Foo
</pre>

<p>(TODO: Fix the fact that CallableJdbc accepts table)</p>

<p><code>CallableJdbcStore</code> is an example of an extension to <code>JdbcStore</code> which uses <code>java.sql.CallableStatement</code> instead of <code>java.sql.PreparedStatement</code>. With the exception of the <code>table</code> option, all of the <code>JdbcStore</code> information applies. </p>

</section><section name="Implementing your own Store">

<p>As storing is a service provided by OSCube, creating your own Store involves implementing the two methods in the <code>org.osjava.oscube.service.store.Store</code> interface. </p>

<pre>
public void store(Result result, Config cfg, Session session) throws StoringException;
public boolean exists(Header header, Config cfg, Session session) throws StoringException;
</pre>

<p>For the moment, it is recommended that the exists method merely <code>return false</code>, it's designed for scrapers that don't want to insert repeated data but is currently not very well tested as a concept. </p>

<p>You can also extend existing Stores, such as the <code>org.osjava.oscube.service.store.JdbcStore</code> to avoid having to do all the JDBC work again. </p>
  </section>
  </body>

</document>
