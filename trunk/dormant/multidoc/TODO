
Create a single multidoc that wraps anything that has a vaguely javadoc style to it.

Usage would be something like:

java -jar multidoc.jar multidocs.conf target/multidocs

Does: xref, xref-tests, javadoc, jcoverage, clover, jdiff

Multidoc is the front end. It is given, via the conf file, a list of document types to multidoc, and a file containing 
urls for each one. 

For each document type, it asks a factory for a loader and a site creator

The loader returns a DocumentSite object, which is added to a collection

The site-creator is given a collection of DocumentSites

The site-creator uses N page-creators to output a site?

DocumentSites contain DocumentPackages

----
Wishlist


c) Scrape index. Merge into uber-index. 1 page per letter.

d) Create dynamic searcher. ( :( ).  Perl CGI.  Uses uber-index?

e) Maintain separate versions of data so they can be rejoined later on. ie) When Lang 2.1 replaces 2.0.

g) Write JavaScript to load more than one frame at a time.

h) Mode to replace an existing one, rather than rebuild the entire system.


====

Long term Design:

mdoc-load 'Commons Lang' <url>
mdoc-unload 'Commons Lang' <url>
mdoc-reload 'Commons Lang' <url>  (calls remove then add)
mdoc-generate

Store:

store/Commons_Lang/index/a.dbhtml
                   packages.dbhtml
                   classes.dbhtml
                   meta.dbhtml


DBHTML is a HTML viewable DB file. Basically a Table I suspect, ordered by the first column. Column-headers DO exist.

