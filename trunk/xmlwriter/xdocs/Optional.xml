<?xml version="1.0"?>
<document>

  <properties>
      <author email="bayard@generationjava.com">Henri Yandell</author>
      <title>Optional uses of XmlWriter</title>
  </properties>

  <body>
    <section name="Optional functionalities">
     <p>In addition to simply outputting XML as a stand-alone library with the SimpleXmlWriter, XmlWriter has other functionalities available. </p>
    </section>
    <section name="Using xmlenc instead">
     <p>Instead of SimpleXmlWriter, the user may choose to use Ernst de Haan's xmlenc project as the underlying writer. Apart from probable better performance, xmlenc also allows you to specify the text encoding, which SimpleXmlWriter does not. </p>
     <code>XmlWriter out = new XmlEncXmlWriter(writer)<br />
     XmlWriter out = new XmlEncXmlWriter(writer, encoding)<br /></code>
     <p>For this functionality, the xmlenc jar needs to be in the classpath. </p>
    </section>
    <section name="Pretty printing">
     <p>The rest of these functionalities are all wrappers [or DelegatingXmlWriters] rather than replacements for SimpleXmlWriter. The first wrapper functionality is pretty printing.</p>
     <code>PrettyPrinterXmlWriter pretty = new PrettyPrinterXmlWriter( xmlwriter );<br />
           pretty.setIndent("\t");<br />
           pretty.setNewline("\n\n");<br />
     </code>
     <p>The default indent is two spaces, and newline is a simple '\n' newline. </p>
    </section>
    <section name="Object formatting">
     <p>Printing numbers and dates can be a pain, so the FormattingXmlWriter helps make it easy. </p>
     <code>FormattingXmlWriter form = new FormattingXmlWriter( xmlwriter );<br />
           form.setNumberFormat( NumberFormat.getCurrencyInstance() );<br />
           form.setDateFormat( DateFormat.getDateInstance() );<br />
     </code>
     <p>Currently the Formatting writer does not know the difference between Numbers and will use the same NumberFormat for Floats, Doubles, Longs etc. </p>
    </section>
    <section name="Empty value handling">
     <p>There are various different strategies to handling null and empty-string data. The EmptyElementXmlWriter allows a strategy to be chosen. </p>
     <code>
       EmptyElementXmlWriter eexw = new EmptyElementXmlWriter( xmlwriter );<br />
       eexw.setEmptyMode(EmptyElementXmlWriter.NULL_EMPTY_MODE);<br />
     </code>
     <p>There are three modes to choose from. EMPTY_MODE considers null and "" to be empty and will not output attributes or tags with names or values that are empty. NULL_EMPTY_MODE considers only null values to be empty, and will print out "", while IGNORE_EMPTY_MODE is the equivalent of not using the EmptyElementXmlWriter. EMPTY_MODE is the default. </p>
    </section>
    <section name="Schema checking">
     <p>DTD and XML Schema are often checked when parsing XML, but rarely checked when outputting XML, even when using the DOM style. The JarvWriter takes a JARV VerifierHandler and checks the XmlWriter output on the fly, currently printing to System.err when a problem happens. </p>
     <p>To use on the fly schema checking, the isorelax and xerces jars need to be on the classpath. Currently JarvWriter is a proof of concept, thus the System.err printing. </p>
    </section>
  </body>

</document>
