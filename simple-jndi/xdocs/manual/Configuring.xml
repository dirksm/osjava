<?xml version="1.0"?>
<document>

  <properties>
      <author email="bayard@generationjava.com">Henri Yandell</author>
      <title>Configuring</title>
  </properties>

  <body>
  <section><div><a href="Downloading.html">previous</a> - <a href="index.html">contents</a> - <a href="GeneralDesign.html">next</a></div></section>
<section name="Installing Simple-JNDI">
<p>
After download, installing Simple-JNDI is as simple as adding the simple-jndi jar to your classpath. Some of the features do however need additional dependencies. To get connection-pooling you will need commons-dbcp, which needs commons-pool and commons-collections. All are linked from the <a href="http://www.osjava.org/simple-jndi/Download.html">download</a> page.
</p>
</section>
<section name="Setting up Simple-JNDI">
<p>
This is where all the work goes in a Simple-JNDI installation. Firstly you need a jndi.properties file, which somehow needs to go into your classpath. This jndi.properties needs one mandatory value:
</p>
<pre>
java.naming.factory.initial=org.osjava.sj.SimpleContextFactory
</pre>
<p>This property, <i>java.naming.factory.initial</i>, is a part of the jndi specification. </p>
<p>
There are three simple-jndi specific parameters. <br />
The first (required) parameter, org.osjava.sj.root, is the location of your simple-jndi root, which is the location in which simple-jndi looks for values when code asks for them. The following code block details a few examples with explanatory comments.
</p>
<pre>
# absolute directory, using the default file protocol
org.osjava.sj.root=/home/hen/gj/simple-jndi/config/

# relative directory, using the default file protocol
org.osjava.sj.root=config/

# specified file protocol with an absolute directory
org.osjava.sj.root=file:///home/hen/gj/simple-jndi/config/

# specified file protocol with a relative directory
org.osjava.sj.root=file://config/
<!--

# classpath protocol with a package 'config'
org.osjava.sj.root=classpath://config
-->
</pre>
<p>
If no org.osjava.sj.root is specified, an Exception is thrown. When classpath support is re-implemented, then a classpath root will be chosen, with no package.
</p>
<p>
The second (optional) parameter is the delimiter used to separate elements in a lookup value. This allows code to get closer to pretending to be another JNDI implementation, such as DNS or LDAP.</p>
<pre>
# DNS/Java like delimiters
org.osjava.sj.delimiter=.

# LDAP/XPath like delimiters
org.osjava.sj.delimiter=/
</pre>
<p>
If no org.osjava.sj.delimiter is specified, then a '.' (dot) is chosen. 
</p>
</section>
<section name="Additional JNDI parameters">
 <p>In addition to the parameters mentioned above there are various others that may be usable....FINISH THIS</p>
</section>
</body>
</document>
