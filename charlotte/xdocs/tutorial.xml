<?xml version="1.0"?>
<document>

  <properties>
      <author email="david@petersheim.com">David Petersheim</author>
      <title>Tutorial</title>
  </properties>

  <body>
<section name="Charlotte  A Bit Based Packet manipulation utility">
  <p>Charlotte is a tool for manipulating Bit Based Packet (BBP). 
     A BBP is a single series of bits representing multiple values.
     For example, a TCP header has the following form. </p>


  <p>The total number of bits in the above definition is 160 bytes.</p>

<p>A charlotte encoding description for a TCP Header would look like this:</p> 

<code>
name: TCP Header<br/>
version=4<br/>
headerLength=4<br/>
typeOfService=8<br/>
totalLength=16<br/>
id=16<br/>
flags=3<br/>
fragmentOffset=13<br/>
timeToLive=8<br/>
protocol=8<br/>
headerChecksum=16<br/>
sourceIp=32<br/>
destinationIp=32
</code>

<p>It would then be used like this:</p>

<pre>
import code316.charlotte.Encoding;
import code316.charlotte.EncodingUtil;
import code316.charlotte.Parser;

public class Test {

    private static final Encoding TCP_ENCODING;
    private static final String TCP_ENCODING_FILE = "encoding-definitions/tcp-encoding.enc";
    static {
        try {
            Parser ep = new Parser();
            InputStream in =
                Test.class.getClassLoader().getResourceAsStream(TCP_ENCODING_FILE);

            if ( in == null ) {
                throw new IllegalStateException("could not load tcp encoding file: " + TCP_ENCODING_FILE);
            }
            TCP_ENCODING = ep.parse(in);
        }
        catch (IOException ioe) {
            throw new RuntimeException("Could not create encoding", ioe);
        }
    }

    public static TcpValue decodeTcpValue(BigInteger bits) {
        Map valueMap = EncodingUtil.expandFields(TCP_ENCODING, bits);
	TcpValue tcp = new TcpValue();
	tcp.setVersion( valueMap.get("version") );
	....
</pre>

</section>
</body>
</document>
