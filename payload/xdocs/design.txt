Payload is two parts. The second part is currently implemented and is 
PayloadExtractor, which deploys the payload and performs search and replace 
using a supplied properties file.

For optimisation, PayloadExtractor will know the files it should search 
and replace on, currently it just acts on .txt and .xml files.

A payload'd jar looks like:

META-INF/MANIFEST.MF
com/generationjava/payload/PayloadExtractor.class
payload/<payload>

and is then run with:
java -jar <the-jar>.jar interpolate.properties

The first part to Payload, currently unimplemented, will be an ant task to 
build the payload'd jar in the first place. Also a Maven plugin.




The first part may in fact be an executable jar. Why drop to Ant?

payload.jar will be executable as:

java -jar payload.jar <output-jar> [list of directories/files]

This will form a new jar with the extract class set as the main-class this 
time, and all the directories/files in the payload/.



Found this just before 0.2 ready to release:

http://www.javaworld.com/javaworld/javatips/jw-javatip120.html

interesting tidbit in there to have a better way of working out the jar
filename. Probably.
