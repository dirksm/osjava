<?xml version="1.0" encoding="UTF-8"?>
  <!--
  **************************************************************************
  BUILD ASSUMPTIONS
  **************************************************************************
  1. ./ refers to the project root directory.  
  2. All jar files must already be located in ./lib.
  3. All web files must already be located in ./webapp/*.
  4. This build.xml file must already be located in ./ (project root).
  5. The build_xml.properties file must already be located in ./ (project root).  
  -->
  
<project name="atom4j" default="build" basedir=".">	
	<property name="build.compiler" value="modern" />

	<!-- define workspaces -->
	<property file="./build_xml.properties" />
	<property name="src" 		   value="${basedir}/src" />
	<property name="lib" 		   value="${basedir}/lib" />
	<property name="webapp" 	   value="${basedir}/webapp" />
	<property name="build_root"    value="${basedir}/build" />
	<property name="build" 		   value="${build_root}/atom4j" />
	<property name="build_classes" value="${build}/classes" /> 
	<property name="dist" 		   value="${build_root}/dist" />
	<property name="package.path"  value="/com/brainopolis/atom4j" />
	<property name="init.prop" 	   value="${build_classes}${package.path}" />
	<property name="jar.name"      value="atom4j.jar" />

	<path id="atom4j.classpath">
	    <fileset dir="${lib}">
	        <include name="*.jar"/>
	    </fileset>
	</path>

	<target name="view">
    	<echo>CLASSPATH:${atom4j.classpath}</echo>
    </target>
    
    <target name="test" depends="build">
		<copy overwrite="true"
			file="log4j.properties"
			tofile="${build_classes}/log4j.properties"
			/>
		<replace file="${build_classes}/log4j.properties" 
			token="LEVEL" 
			value="ERROR" 
			/>
		<java fork="yes" classname="com.brainopolis.atom4j.reader.EntryReader">
			<classpath>
	            <path refid="atom4j.classpath"/> 
	            <path location="${build_classes}" /> 
			</classpath>
		</java>
    </target>

	<target name="junit" depends="dist" >

		<java classname="junit.textui.TestRunner" fork="yes" failonerror="false">
			<arg value="org.roller.presentation.TestAll"/>
			<classpath>
	            <path refid="atom4j.classpath"/> 
	            <path location="${dist}/dev/${jar.name}" /> 
			</classpath>
		</java>	
	
	</target>    
	
	<!-- make sure the destinations exist -->
	<target name="prepare">
		<mkdir dir="${build_classes}" />
		<mkdir dir="${dist}/dev" />
		<mkdir dir="${dist}/test" />
		<mkdir dir="${dist}/prod" />
	</target>
	
	<!-- compile classes -->
	<target name="build" depends="prepare">
		<javac 
			srcdir="${src}" 
			destdir="${build_classes}" 
			includeantruntime="false" 
			debug="true" 
			optimize="false" 
			verbose="false" 
			deprecation="false">
			<include name="com/**" />
			<include name="org/**" />
			<classpath>
	            <path refid="atom4j.classpath"/>
	        </classpath>
		</javac>
	</target>

	<!-- zip up war files from webapp contents -->
	<target name="dist" depends="build">

		<!-- "dev" war -->
		<antcall target="dist-jar" >
			<param name="dist-ver"			 value="dev" />
			<param name="log4j.level"        value="${log4j.level.dev}" />
		</antcall>
		
		<!-- "test" war -->
		<antcall target="dist-jar" >
			<param name="dist-ver"			 value="test" />
			<param name="log4j.level"        value="${log4j.level.test}" />
		</antcall>

		<!-- "prod" war -->
		<antcall target="dist-jar" >
			<param name="dist-ver"			 value="prod" />
			<param name="log4j.level"        value="${log4j.level.prod}" />
		</antcall>
		
	</target>
	
	<target name="dist-jar">
		<echo>BUILDING "${dist-ver}" JAR FILE</echo>
		
		<delete file="${dist}/${dist-ver}/${jar.name}" />

		<copy overwrite="true"
			file="log4j.properties"
			tofile="${build_classes}/log4j.properties"
			/>
		<replace file="${build_classes}/log4j.properties" 
			token="LEVEL" 
			value="${log4j.level}" 
			/>
	
		<zip zipfile="${dist}/${dist-ver}/${jar.name}">
			<zipfileset dir="${build_classes}" includes="**" />
		</zip>	
	</target>

	<!-- delete the build byproducts -->
	<target name="clean">
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>
</project>

